version: '3'

services:
  core:
    hostname: core
    build:
      context: .
      dockerfile: Dockerfile
      args:
        # [Choice] Node.js version: 22, 24
        VARIANT: 22
        # On Linux, you may need to update USER_UID and USER_GID below if not your local UID is not 1000.
        USER_UID: 1000
        USER_GID: 1000
    environment:
      # sane default to allow the server to bind to any interface in the container
      HOSTNAME: localhost
      # temporary storage for files inside the container
      FILE_STORAGE_ROOT_PATH: /tmp/graasp-file-item-storage
      # the localfile config host points to the static file server defined below
      FILE_STORAGE_HOST: http://localhost:1081
      # H5P local storage host used in local only
      H5P_FILE_STORAGE_HOST: http://localhost:1081
      # endpoint of the nudenet model
      IMAGE_CLASSIFIER_API: http://nudenet:8080/sync
      # the DB config is set by the "db" service below
      DB_CONNECTION: postgres://graasper:graasper@db:5432/graasp
      # the Etherpad config is set by the "etherpad" service below
      ETHERPAD_URL: http://etherpad:9001
      ETHERPAD_PUBLIC_URL: http://localhost:9001
      ETHERPAD_COOKIE_DOMAIN: localhost
      # Api key is set by ./etherpad/devApiKey.txt
      ETHERPAD_API_KEY: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
      # the Redis config is set by the "redis" service below
      REDIS_CONNECTION: redis://redis:6379
      # the Mailer config is set by the "mailer" service below
      MAILER_CONNECTION: smtp://docker:docker@mailer:1025
      # the Localstack config is set by the "localstack" service below
      S3_FILE_ITEM_HOST: http://localstack:4566
      # the Iframely config is set by the "iframely" service below
      EMBEDDED_LINK_ITEM_IFRAMELY_HREF_ORIGIN: http://iframely:8061

    volumes:
      - ..:/workspace:cached
      - ../tmp:/tmp/graasp-file-item-storage
    # Overrides default command so things don't shut down after the process ends.
    command: sleep infinity
    ports:
      - 3000:3000

  db:
    hostname: db
    image: postgres:15.8-alpine
    restart: on-failure
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgresql:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_DB: docker
      POSTGRES_USER: docker
      POSTGRES_PASSWORD: docker
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    hostname: redis
    image: redis
    restart: on-failure

  etherpad:
    hostname: etherpad
    image: etherpad/etherpad
    # start the server with dev API key
    # https://hub.docker.com/r/etherpad/etherpad/dockerfile
    # https://github.com/ether/etherpad-lite/issues/3849
    volumes:
      # bind copy the dev API key
      - ./etherpad/devApiKey.txt:/opt/etherpad-lite/APIKEY.txt
    ports:
      - 9001:9001
    environment:
      - DB_TYPE=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=etherpad
      - DB_USER=etherpad
      - DB_PASS=etherpad
      # allow only group pads
      #Â - REQUIRE_SESSION=true
      # only API can create pads
      - EDIT_ONLY=true
    # restart the container until db has created tables
    restart: on-failure
    depends_on:
      - db

  meilisearch:
    hostname: meilisearch
    image: getmeili/meilisearch:v1.8
    restart: on-failure
    environment:
      - MEILI_MASTER_KEY=masterKey
      - MEILI_NO_ANALYTICS=true
      - MEILI_ENV=development
      - MEILI_LOG_LEVEL
    # uncomment below to develop on the meilisearch interface from your local machine
    # by default ports do not need to be exposed as all queries are proxied by the backend
    # ports:
    #   - 7700:7700
    volumes:
      - ./meilisearch_data:/meili_data

  umami:
    hostname: umami
    image: ghcr.io/umami-software/umami:postgresql-latest
    environment:
      DATABASE_URL: postgresql://umami:umami@db:5432/umami
      DATABASE_TYPE: postgresql
      APP_SECRET: a5b20f9ac88eb6d9c2a443664968052ee9f34a3ea8ed1ebe0c0d5c51d5ea78ca
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:3000/api/heartbeat"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - 8000:3000

  # Localstack is used to test aws services locally
  localstack:
    hostname: localstack
    image: localstack/localstack
    volumes:
      - ../tmp:/tmp/graasp-localstack
      - './localstack/init.sh:/etc/localstack/init/ready.d/init-aws.sh'
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - SERVICES=s3
      - DEBUG=1
      - DOCKER_HOST=unix:///var/run/docker.sock
      - AWS_DEFAULT_REGION=us-east-1
    ports:
      - 4566-4583:4566-4583

  localfile:
    hostname: localfile
    image: joseluisq/static-web-server:2
    environment:
      # Note: those envs are customizable but also optional
      # - SERVER_HOST=127.0.0.1
      - SERVER_PORT=80
      - SERVER_ROOT=/tmp/graasp-file-item-storage
    volumes:
      - ../tmp:/tmp/graasp-file-item-storage
    ports:
      - 1081:80

  # necessary for graasp-embedded-link-item
  iframely:
    hostname: iframely
    image: graasp/iframely:latest
    environment:
      NODE_ENV: production # required in order for the responses to not timeout
    # exposing these ports is not necessary
    # ports:
    #   - 8061:8061

  # necessary for validation
  nudenet:
    hostname: nudenet
    image: notaitech/nudenet:classifier
    # exposing these ports is not necessary
    # ports:
    #   - 8080:8080

  # a mock mailbox on port 1025 (web UI at http://localhost:1080)
  mailer:
    hostname: mailer
    image: schickling/mailcatcher
    ports:
      - "1080:1080"

volumes:
  postgres-data:
