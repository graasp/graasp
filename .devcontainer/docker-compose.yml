version: '3'

services:
  app:
    container_name: graasp-core
    build:
      context: .
      dockerfile: Dockerfile
      args:
        # [Choice] Node.js version: 14, 12, 10
        VARIANT: 18
        # On Linux, you may need to update USER_UID and USER_GID below if not your local UID is not 1000.
        USER_UID: 1000
        USER_GID: 1000
    environment:
      # sane default to allow the server to bind to any interface in the container
      HOSTNAME: 0.0.0.0
      # the generated links should open the browser locally
      PUBLIC_URL: http://localhost:3000
      # temporary storage for files inside the container
      FILE_STORAGE_ROOT_PATH: /tmp/graasp-file-item-storage
      # the localfile config host points to the static file server defined below
      FILE_STORAGE_HOST: http://localhost:1081
      # the DB config is set by the "db" service below
      DB_NAME: docker
      DB_USERNAME: docker
      DB_PASSWORD: docker
      DB_HOST: db
      # the Etherpad config is set by the "etherpad" service below
      ETHERPAD_URL: http://etherpad:9001
      ETHERPAD_PUBLIC_URL: http://localhost:9001
      ETHERPAD_COOKIE_DOMAIN: localhost
      # Api key is set by ./etherpad/devApiKey.txt
      ETHERPAD_API_KEY: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
      # the Redis config is set by the "redis" service below
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # the Mailer config is set by the "mailer" service below
      MAILER_CONFIG_SMTP_HOST: mailer
      MAILER_CONFIG_SMTP_PORT: 1025
      MAILER_CONFIG_SMTP_USE_SSL: 'false' # only for dev purposes
      MAILER_CONFIG_USERNAME: docker
      MAILER_CONFIG_PASSWORD: docker
      # the Localstack config is set by the "localstack" service below
      S3_FILE_ITEM_HOST: http://localstack:4566
      # the Iframely config is set by the "iframely" service below
      EMBEDDED_LINK_ITEM_IFRAMELY_HREF_ORIGIN: http://graasp-iframely:8061

    volumes:
      - ..:/workspace:cached
      - ../tmp:/tmp/graasp-file-item-storage
    # Overrides default command so things don't shut down after the process ends.
    command: sleep infinity
    ports:
      - 3000:3000

  db:
    container_name: graasp-postgres
    image: postgres:15
    restart: on-failure
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: docker
      POSTGRES_USER: docker
      POSTGRES_PASSWORD: docker
    # Add "forwardPorts": ["5432"] to **devcontainer.json** to forward MongoDB locally.
    # (Adding the "ports" property to this file will not forward from a Codespace.)

  test-db:
    container_name: graasp-postgres-test
    image: postgres:15
    restart: on-failure
    ports:
      - 5434:5432
    environment:
      POSTGRES_DB: docker-test
      POSTGRES_USER: docker-test
      POSTGRES_PASSWORD: docker-test
    # no volumes since we don't care about perssissting the data

  redis:
    container_name: graasp-redis
    image: redis
    restart: on-failure

  etherpad:
    container_name: graasp-etherpad
    image: etherpad/etherpad
    # start the server with dev API key
    # https://hub.docker.com/r/etherpad/etherpad/dockerfile
    # https://github.com/ether/etherpad-lite/issues/3849
    volumes:
      # bind copy the dev API key
      - ./etherpad/devApiKey.txt:/opt/etherpad-lite/APIKEY.txt
    ports:
      - 9001:9001
    environment:
      - DB_TYPE=postgres
      - DB_HOST=etherpad-db
      - DB_PORT=5432
      - DB_NAME=etherpad
      - DB_USER=etherpad
      - DB_PASS=etherpad
      # allow only group pads
      #Â - REQUIRE_SESSION=true
      # only API can create pads
      - EDIT_ONLY=true
    # restart the container until db has created tables
    restart: on-failure
    depends_on:
      - etherpad-db

  etherpad-db:
    container_name: graasp-postgres-etherpad
    image: postgres:15
    restart: on-failure
    ports:
      - 5433:5432
    volumes:
      - postgres-data-etherpad:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: etherpad
      POSTGRES_USER: etherpad
      POSTGRES_PASSWORD: etherpad

  meilisearch:
    container_name: graasp-meilisearch
    image: getmeili/meilisearch:v1.2
    restart: on-failure
    environment:
      - MEILI_MASTER_KEY=masterKey
      - MEILI_NO_ANALYTICS=true
      - MEILI_ENV=development
      - MEILI_LOG_LEVEL
    ports:
      - 7700:7700
    volumes:
      - ./meilisearch_data:/meili_data

  # Localstack is used to test aws services locally
  localstack:
    container_name: graasp-localstack
    image: localstack/localstack
    volumes:
      - ${TMPDIR}/localstack:/tmp/graasp-localstack
      - './localstack/init.sh:/etc/localstack/init/ready.d/init-aws.sh'
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - SERVICES=s3
      - DEBUG=1
      - DOCKER_HOST=unix:///var/run/docker.sock
      - AWS_DEFAULT_REGION=us-east-1
    ports:
      - 4566-4583:4566-4583

  localfile:
    image: joseluisq/static-web-server:2
    environment:
      # Note: those envs are customizable but also optional
      # - SERVER_HOST=127.0.0.1
      - SERVER_PORT=80
      - SERVER_ROOT=/tmp/graasp-file-item-storage
    volumes:
      - ../tmp:/tmp/graasp-file-item-storage
    ports:
      - 1081:80

  # necessary for graasp-embedded-link-item
  iframely:
    container_name: graasp-iframely
    image: graasp/iframely:latest
    environment:
      NODE_ENV: staging # why "staging" ??
    ports:
      - 8061:8061

  # necessary for validation
  nudenet:
    container_name: graasp-nudenet
    image: notaitech/nudenet:classifier
    ports:
      - 8080:8080

  # a mock mailbox on port 1025 (web UI at http://localhost:1080)
  mailer:
    image: schickling/mailcatcher
    ports:
      - "1025:1025"
      - "1080:1080"

volumes:
  postgres-data:
  postgres-data-etherpad:
