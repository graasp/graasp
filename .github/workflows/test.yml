name: Node CI

on: [push]

jobs:
  build-node:
    runs-on: ubuntu-latest

    # abort running jobs if newer version is detected on same branch
    concurrency:
      group: ${{ github.head_ref ||Â github.ref }}
      cancel-in-progress: true
      
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: docker
          POSTGRES_USER: docker
          POSTGRES_DB: typeorm
        ports:
          - 5432:5432 # exposing 5432 port for application to use
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: create test schema
        run: psql -f test/db/init.sql postgresql://docker:docker@localhost:5432/typeorm
        
      - name: Use Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          
      - name: Get yarn cache directory
        id: yarn-cache-dir-path
        run: |
          echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: yarn install and build
        run: |
          yarn
          yarn build

      - name: apply migrations on empty database
        env:
          DB_PASSWORD: docker
          DB_USERNAME: docker
          DB_NAME: typeorm
        run: yarn migration:run
        
      - name: check migrations are synced with the current codebase
        env:
          DB_PASSWORD: docker
          DB_USERNAME: docker
          DB_NAME: typeorm
        run: yarn migration:check

      - name: yarn test
        run: 
          yarn test:ci
        env:
          CI: true
          # random keys
          SECURE_SESSION_SECRET_KEY: ${{ secrets.MOCK_SECURE_SESSION_SECRET_KEY }}
          JWT_SECRET: ${{ secrets.MOCK_JWT_SECRET }}
          REFRESH_TOKEN_JWT_SECRET: ${{ secrets.MOCK_REFRESH_TOKEN_JWT_SECRET }}
          AUTH_TOKEN_JWT_SECRET: ${{ secrets.MOCK_AUTH_TOKEN_JWT_SECRET }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          FILE_STORAGE_ROOT_PATH: /
          H5P_PATH_PREFIX: h5p
          BUILDER_CLIENT_HOST: 'http://localhost:3111'
          PLAYER_CLIENT_HOST: 'http://localhost:3112'
          EXPLORER_CLIENT_HOST: 'http://localhost:3113'
          ETHERPAD_URL: http://etherpad:9001
          ETHERPAD_API_KEY: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
          COOKIE_DOMAIN: localhost
          MAILER_CONFIG_SMTP_HOST: localhost
          MAILER_CONFIG_USERNAME: username
          MAILER_CONFIG_PASSWORD: password
          # mock uuid
          APPS_PUBLISHER_ID: 9c9cea73-f3b7-48a3-aa6e-ead82c0685e7
          RECAPTCHA_SECRET_ACCESS_KEY: 'iamamockkey'
