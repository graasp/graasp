name: Deploy to development environment

on:
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# env:
#   NODE_OPTIONS: '--max_old_space_size=8192' # Allows to increase Node's max heap size

permissions:
  id-token: write # This is required for requesting the JWT ofr OIDC

jobs:
  # Build image and push to ECR
  build:
    name: Build & Push Image
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build images
        uses: ./.github/actions/build-images
        with:
          tag: next
          aws-ecr-uri: ${{ vars.PRIVATE_ECR }}
          aws-role-arn: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

  # Deploy to dev environment
  # deploy:
  #   needs: build
  #   name: Deploy
  #   runs-on: ubuntu-latest
  #   environment: development

  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v4

  #     # Configure AWS credential and region environment variables for use in next steps
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }} # todo: add in envs
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }} # todo: add in envs
  #         aws-region: ${{ vars.AWS_REGION }}

  #     # Log in the local Docker client
  #     - name: Login to Amazon ECR
  #       id: login-ecr-deploy
  #       uses: aws-actions/amazon-ecr-login@v2

  #     # Insert a container image URI into template Amazon ECS task definition JSON file, creating a new task definition file.
  #     - name: Fill in the new image ID in the Amazon ECS task definition
  #       id: task-def-1
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: ${{ vars.ECS_TASK_DEFINITION }}
  #         container-name: ${{ vars.CONTAINER_NAME_GRAASP }}
  #         image: ${{ needs.build.outputs.image_url }}
  #         environment-variables: |
  #           DB_CONNECTION_POOL_SIZE=${{ vars.DB_CONNECTION_POOL_SIZE }}
  #           APPS_JWT_SECRET=${{ secrets.APPS_JWT_SECRET }}
  #           APPS_PUBLISHER_ID=${{ secrets.APPS_PUBLISHER_ID }}
  #           AUTH_TOKEN_EXPIRATION_IN_MINUTES=${{ secrets.AUTH_TOKEN_EXPIRATION_IN_MINUTES }}
  #           AUTH_TOKEN_JWT_SECRET=${{ secrets.AUTH_TOKEN_JWT_SECRET }}
  #           CLIENT_HOST=${{ vars.CLIENT_HOST }}
  #           COOKIE_DOMAIN=${{ vars.COOKIE_DOMAIN }}
  #           CORS_ORIGIN_REGEX=${{ secrets.CORS_ORIGIN_REGEX }}
  #           DB_CONNECTION=postgres://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:5432/${{ secrets.DB_NAME }}

  #           DB_READ_REPLICA_CONNECTIONS=${{ secrets.DB_READ_REPLICA_CONNECTIONS }}
  #           SENTRY_ENV=${{ vars.SENTRY_ENV }}
  #           EMBEDDED_LINK_ITEM_IFRAMELY_HREF_ORIGIN=${{ vars.EMBEDDED_LINK_ITEM_IFRAMELY_HREF_ORIGIN }}
  #           ETHERPAD_API_KEY=${{ secrets.ETHERPAD_API_KEY }}
  #           ETHERPAD_COOKIE_DOMAIN=${{ vars.ETHERPAD_COOKIE_DOMAIN }}
  #           ETHERPAD_URL=${{ vars.ETHERPAD_URL }}
  #           FILE_STORAGE_ROOT_PATH=${{ secrets.FILE_STORAGE_ROOT_PATH }}
  #           H5P_CONTENT_ACCESS_KEY_ID=${{ secrets.H5P_CONTENT_ACCESS_KEY_ID }}
  #           H5P_CONTENT_BUCKET=${{ vars.H5P_CONTENT_BUCKET }}
  #           H5P_CONTENT_REGION=${{ vars.H5P_CONTENT_REGION }}
  #           H5P_CONTENT_SECRET_ACCESS_KEY_ID=${{ secrets.H5P_CONTENT_SECRET_ACCESS_KEY }}
  #           H5P_FILE_STORAGE_TYPE=${{ vars.H5P_FILE_STORAGE_TYPE }}
  #           H5P_PATH_PREFIX=${{ vars.H5P_PATH_PREFIX }}
  #           HOSTNAME=${{ vars.HOSTNAME }}
  #           IMAGE_CLASSIFIER_API=${{ vars.IMAGE_CLASSIFIER_API }}
  #           JOB_SCHEDULING=${{ vars.JOB_SCHEDULING || false }}
  #           JWT_SECRET=${{ secrets.JWT_SECRET }}
  #           PASSWORD_RESET_JWT_SECRET=${{ secrets.PASSWORD_RESET_JWT_SECRET }}
  #           EMAIL_CHANGE_JWT_SECRET=${{ secrets.EMAIL_CHANGE_JWT_SECRET }}
  #           LIBRARY_CLIENT_HOST=${{ vars.LIBRARY_CLIENT_HOST }}
  #           LOG_LEVEL=${{ vars.LOG_LEVEL }}
  #           MAILER_CONFIG_FROM_EMAIL=${{ secrets.MAILER_CONFIG_FROM_EMAIL }}
  #           MAILER_CONFIG_PASSWORD=${{ secrets.MAILER_CONFIG_PASSWORD_DEV }}
  #           MAILER_CONFIG_SMTP_HOST=${{ secrets.MAILER_CONFIG_SMTP_HOST }}
  #           MAILER_CONFIG_USERNAME=${{ secrets.MAILER_CONFIG_USERNAME }}
  #           MEILISEARCH_MASTER_KEY=${{ secrets.MEILISEARCH_MASTER_KEY }}
  #           MEILISEARCH_REBUILD_SECRET=${{ secrets.MEILISEARCH_REBUILD_SECRET }}
  #           MEILISEARCH_URL=${{ secrets.MEILISEARCH_URL }}
  #           NODE_ENV=${{ vars.NODE_ENV }}
  #           PORT=${{ vars.PORT }}
  #           PUBLIC_URL=${{ secrets.PUBLIC_URL }}
  #           RECAPTCHA_SECRET_ACCESS_KEY=${{ secrets.RECAPTCHA_SECRET_ACCESS_KEY }}
  #           REDIS_HOST=${{ secrets.REDIS_HOST }}
  #           REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
  #           REDIS_PORT=${{ secrets.REDIS_PORT }}
  #           REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}
  #           REFRESH_TOKEN_EXPIRATION_IN_MINUTES=${{ vars.REFRESH_TOKEN_EXPIRATION_IN_MINUTES }}
  #           REFRESH_TOKEN_JWT_SECRET=${{ secrets.REFRESH_TOKEN_JWT_SECRET }}
  #           S3_FILE_ITEM_ACCESS_KEY_ID=${{ secrets.S3_FILE_ITEM_ACCESS_KEY_ID }}
  #           S3_FILE_ITEM_BUCKET=${{ vars.S3_FILE_ITEM_BUCKET }}
  #           S3_FILE_ITEM_PLUGIN=${{ vars.S3_FILE_ITEM_PLUGIN }}
  #           S3_FILE_ITEM_REGION=${{ vars.S3_FILE_ITEM_REGION }}
  #           S3_FILE_ITEM_SECRET_ACCESS_KEY=${{ secrets.S3_FILE_ITEM_SECRET_ACCESS_KEY }}
  #           SECURE_SESSION_SECRET_KEY=${{ secrets.SECURE_SESSION_SECRET_KEY }}
  #           SENTRY_DSN=${{ secrets.SENTRY_DSN }}
  #           WEBSOCKETS_PLUGIN=${{ vars.WEBSOCKETS_PLUGIN }}
  #           OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
  #           OPENAI_ORG_ID=${{ secrets.OPENAI_ORG_ID }}
  #           GEOLOCATION_API_HOST=${{ vars.GEOLOCATION_API_HOST }}
  #           GEOLOCATION_API_KEY=${{ secrets.GEOLOCATION_API_KEY }}

  #     # Use latest revision of the task-definition to deploy the application to ECS
  #     - name: Deploy Amazon ECS task definition
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v2
  #       with:
  #         task-definition: ${{ steps.task-def-1.outputs.task-definition }}
  #         service: ${{ vars.ECS_SERVICE_GRAASP }}
  #         cluster: ${{ vars.ECS_CLUSTER_GRAASP }}
  #         wait-for-service-stability: true
