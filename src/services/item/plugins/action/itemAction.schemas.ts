import { Type } from '@sinclair/typebox';
import { StatusCodes } from 'http-status-codes';

import type { FastifySchema } from 'fastify';

import { type UnionOfConst } from '@graasp/sdk';

import { actionRequestExportFormats } from '../../../../drizzle/schema';
import { customType } from '../../../../plugins/typebox';
import { errorSchemaRef } from '../../../../schemas/global';

export const View = {
  Builder: 'builder',
  Player: 'player',
  Library: 'library',
  Explorer: 'explorer',
  Account: 'account',
  Auth: 'auth',
  Unknown: 'unknown',
} as const;
export type ViewOptions = UnionOfConst<typeof View>;

export const getItemActionsByHour = {
  operationId: 'getItemActionsByHour',
  tags: ['action'],
  summary: 'Get actions for item and its descendants by hour',
  description:
    'Get sum of actions count per type generated by users for the given item and its descendants by hour.',

  params: customType.StrictObject({
    id: customType.UUID(),
  }),
  querystring: customType.StrictObject({
    startDate: Type.Optional(Type.String({ format: 'date-time' })),
    endDate: Type.Optional(Type.String({ format: 'date-time' })),
  }),
  response: {
    [StatusCodes.OK]: Type.Object({}, { additionalProperties: true }),
    '4xx': errorSchemaRef,
  },
} as const satisfies FastifySchema;

export const getItemActionsByDay = {
  operationId: 'getItemActionsByDay',
  tags: ['action'],
  summary: 'Get actions for item and its descendants by day',
  description:
    'Get sum of actions count per type generated by users for the given item and its descendants by day.',

  params: customType.StrictObject({
    id: customType.UUID(),
  }),
  querystring: customType.StrictObject({
    startDate: Type.Optional(Type.String({ format: 'date-time' })),
    endDate: Type.Optional(Type.String({ format: 'date-time' })),
  }),
  response: {
    [StatusCodes.OK]: Type.Object({}, { additionalProperties: true }),
    '4xx': errorSchemaRef,
  },
} as const satisfies FastifySchema;

export const getItemActionsByWeekday = {
  operationId: 'getItemActionsByWeekday',
  tags: ['action'],
  summary: 'Get actions for item and its descendants by weekday',
  description:
    'Get sum of actions count per type generated by users for the given item and its descendants by weekday.',

  params: customType.StrictObject({
    id: customType.UUID(),
  }),
  querystring: customType.StrictObject({
    startDate: Type.Optional(Type.String({ format: 'date-time' })),
    endDate: Type.Optional(Type.String({ format: 'date-time' })),
  }),
  response: {
    [StatusCodes.OK]: Type.Object({}, { additionalProperties: true }),
    '4xx': errorSchemaRef,
  },
} as const satisfies FastifySchema;

export const exportActions = {
  operationId: 'exportActions',
  tags: ['action'],
  summary: 'Send request to export actions',
  description:
    'Send request to export actions for given item. The user receives an email with a download link. The generated export is available for a week, and can be generated only once a day.',

  params: customType.StrictObject({
    id: customType.UUID({ description: 'Item id whose actions will be exported.' }),
  }),
  querystring: Type.Partial(
    customType.StrictObject({
      format: Type.Union(actionRequestExportFormats.map((format) => Type.Literal(format))),
    }),
  ),
  response: {
    [StatusCodes.NO_CONTENT]: Type.Null({ description: 'Successful Response' }),
    '4xx': errorSchemaRef,
  },
} as const satisfies FastifySchema;

export const postAction = {
  operationId: 'postAction',
  tags: ['action'],
  summary: 'Save action for item',
  description: 'Save action for item with given type and extra.',

  params: customType.StrictObject({
    id: customType.UUID({ description: 'The new action will be saved for this item id.' }),
  }),
  body: customType.StrictObject({
    type: Type.String(),
    extra: Type.Optional(Type.Object({}, { additionalProperties: true })),
  }),
  response: {
    [StatusCodes.NO_CONTENT]: Type.Null({ description: 'Successful Response' }),
    '4xx': errorSchemaRef,
  },
} as const satisfies FastifySchema;
